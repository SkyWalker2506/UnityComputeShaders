#pragma kernel SolidRed
#pragma kernel SolidYellow
#pragma kernel SplitScreen
#pragma kernel Circle
#pragma kernel Square

RWTexture2D<float4> Result;
int texResolution;

[numthreads(8,8,1)]
void SolidRed (uint3 id : SV_DispatchThreadID)
{
     Result[id.xy] = float4(1.0, 0.0, 0.0, 1.0);
}

[numthreads(8,8,1)]
void SolidYellow (uint3 id : SV_DispatchThreadID)
{
     Result[id.xy] = float4(1.0, 1.0, 0.0, 1.0);
}

[numthreads(8,8,1)]
void SplitScreen (uint3 id : SV_DispatchThreadID)
{
     const int halfRes = texResolution >> 1;
     Result[id.xy] = float4(step(halfRes,id.x), step(halfRes,id.y), 0.0, 1.0);
}

float InCircle(float2 pos, float2 center, float radius)
{
    return length(pos - center) < radius ? 1.0 : 0.0;
}

[numthreads(8,8,1)]
void Circle (uint3 id : SV_DispatchThreadID)
{
     float result =InCircle(id.xy,  texResolution>>1, texResolution>>2);
     Result[id.xy] = float4(result, result, 0, 0);
}

float InSquare(float2 pos, float2 center, float2 size)
{
     const float2 newPos= pos - center;
     return abs(newPos.x) < size.x && abs(newPos.y) < size.y ? 1.0 : 0.0;
}

[numthreads(8,8,1)]
void Square (uint3 id : SV_DispatchThreadID)
{
     float result =InSquare(id.xy,  texResolution>>1, texResolution>>2);
     Result[id.xy] = float4(0,0,result,0);

}



